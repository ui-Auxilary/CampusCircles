// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  username        String          @unique
  email           String          @unique
  password        String

  photo           String
  gender          String
  age             Int
  mbti            String
  bio             String
  interests       String[]
  courses         String[]

  eventsCreated   Event[]         @relation("EventsCreated")
  eventsAttend    EventAttendee[] @relation("EventAttendees")

  invReceived     Invitation[]    @relation("InvitationsReceived")
  invSent         Invitation[]    @relation("InvitationsSent")

  friendIds       String[]        @db.ObjectId

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Event {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  location        String
  date            DateTime
  time            DateTime
  photo           String?
  description     String
  public          Boolean         @default(true)
  society         Boolean         @default(false)

  eventAttendees  EventAttendee[] @relation("EventAttendees")
  invitations     Invitation[]    @relation("EventInvitations")

  tag             Tag             @relation("EventTag", fields: [tagId], references: [id])
  tagId           String          @db.ObjectId

  creator         User            @relation("EventsCreated", fields: [creatorId], references: [id])
  creatorId       String          @db.ObjectId

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum InvitationStatus {
  pending
  accepted
  rejected
}

model Invitation {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  event           Event            @relation("EventInvitations", fields: [eventId], references: [id])
  eventId         String           @db.ObjectId
  invitee         User             @relation("InvitationsReceived", fields: [inviteeId], references: [id])
  inviteeId       String           @db.ObjectId
  inviter         User             @relation("InvitationsSent", fields: [inviterId], references: [id])
  inviterId       String           @db.ObjectId
  status          InvitationStatus @default(pending)
}

model Tag {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  events          Event[]         @relation("EventTag")

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model EventAttendee {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  event           Event           @relation("EventAttendees", fields: [eventId], references: [id])
  eventId         String          @db.ObjectId
  user            User            @relation("EventAttendees", fields: [userId], references: [id])
  userId          String          @db.ObjectId
}
